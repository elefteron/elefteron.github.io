load_new('scr/fontorg-func.js')
// ------------------------------------------------
// get&check AdobeFontSet(.afs) Mac/Win, save/load to .js, export to rtf/htm '  
Pid='FontOrg.js';id2=' (3.1a 2010.Nov) ' //'(3.0 2008.12.25) (2.8.js 2007.apr) (2.7.pas 1999.jun)'
gener='Generated by '+Pid+id2
// ------------------------------------------------
function StatSets(){ var buf=''
  if(LastSet<0) return 
  /*--- clear Statistic !!!---*/
  for (k=0; k<=LastSet; k++) with (Sets[k]) {
  TTfil=0; PSfil=0; }
  TT=0;    PS=0; /*totals*/

  for (k=0; k<=LastFont; k++) with (Fonts[k]) with (Sets[SetNo]) {
    if (TypeCh=='T') { TT++; TTfil++; } else { PS++; PSfil++; }
  }
}
function ListSets(){ var buf=''
  buf+='<pre><code>'//+'ListSets:'+ (LastSet+1)+eol
  if(LastSet<0) return ''

  buf+=   fr('set#'        ,4,'_')+' '+fr('set-name'    ,SetNameLng,'_')
//   +' '+fr('TT_fonts'    ,7,'_')+' '+fr('PS_fonts' ,7,'_')
     +' '+fr('TT_files'    ,7,'_') +' '+fr('PS_files'    ,7,'_') 
     +' '+'Total_'+eol;
  for (k=0; k<=LastSet; k++) with (Sets[k]){   
     buf+=       fl(k             ,4,' ');	 
     buf+= ' '  +fr(Name          ,SetNameLng,' ');
//   buf+= ' '  +fl(TTfon         ,7,' ')+' '+fl(PSfon ,7,' ') 
//    if have same "winname" files are in same font family
     buf+= '   '+fl(TTfil         ,7,' ');
     buf+= '  ' +fl(PSfil         ,7,' ');
     buf+= ' '  +fl((TTfil+PSfil) ,7,' ');
//   paths counter
//   bad fonts counter (in red): |bad-tt+ps-chr-lng|dbl-tt|dbl-ps|
     buf+=eol;
  }
  buf+=//'<pre><code>ListSets:'+ (LastSet+1)+eol
        fl((LastSet+1),4," ")+' '+fr('-',SetNameLng,'-')+' '
  +'  '+fl(TT,7,' ')+'  '+fl(PS,7,' ')+' '+fl(TT+PS,7,' ')+eol;
  buf+='</code></pre>'
  return buf
}// ------------------------------------------------
function ListPaths(){var buf=''
  buf+='<pre><code>'//+'ListPaths:'+ (LastPath+1)+eol
  if(LastPath<0) return ''
  buf+=fr('path#'    ,5,'_')
     +' '+fr('path' ,MaxPathLng,'_')
     +' '+fr('files',5,'_') +eol;
  for (k=0; k<=LastPath; k++) with (Paths[k]){
  buf+=fr(k          ,5,' ')
     +' '+fr(Name   ,MaxPathLng,' ')
     +' '+fr(Pfiles ,5,' ') +eol;
  }
  buf+='</code></pre>'
  return buf
}// ------------------------------------------------
function ListFonts(e_){var buf='',s,e=true;// <- ordered by set from afs
  if(LastFont<0) return ''
  var setnm='';/*current set name*/
  buf+='<pre><code>ListFonts:'+ (LastFont+1)
  if(e_=='all') e=false; else e=true;
  if(e) buf+=' - with err/wrn '; else buf+=' - all  '
  buf+=eol
  var FontHeader='fnt#'
       +' '+fr('Type'    , 4        ,'_')
       +' '+fr('Style'   , 5        ,'_')  
       +' '+fr('WinName' ,FntNameLng,'_')
       +' '+fr('PSname'  ,FntNameLng,'_')   
       +' '+fr('FileName',26,'_')
       +' '+fr('Flag'    , 4,'_')+' '+fr('Bad'    ,3,'_')   
       +' '+fr('RepWin'  , 7,'_')+' '+fr('RepPs'  ,7,'_')   
       +' '+fr('RepStWin', 9,'_')+' '+fr('RepStPs',9,'_') 
       +' '+fr('PathNo'  , 4,'_')+' '+fr('SetNo'  ,4,'_')  +' msg---'+eol
  buf+=FontHeader
  for (k=0; k<=LastFont; k++) {
    s=Fonts[k].SetNo
    if (setnm!=Sets[s].Name)  { setnm=Sets[s].Name;
      buf+='--- set #'+s+' "'+setnm+'" '
         +' files:'+(Sets[s].TTfil+Sets[s].PSfil)+' ---'+eol;
    //buf+=FontHeader
    }
    buf+=ShowFont(k,e);// #, err only true/false
  }
  buf+='</code></pre>'
  return buf
}// ------------------------------------------------
function ShowFont(k,e){ var buf='', mes='' //+ChRpt(' ',FntNameLng-PSname.length)
  with (Fonts[k]) { 
    mes=GetFontErr(k) 
    buf+=fl(k,4,' ')
       +' '+fr(TypeCh  ,4,' ')
       +' '+fr(StyleCh ,5,' ')  
       +' '+fr(WinName ,FntNameLng,'_')
       +' '+fr(PSname  ,FntNameLng,'_')   
       +' '+fr(FileName,26,' ') 
       +' '+fr(Flag    ,4,' ')+' '+fr(Bad    ,3,' ') 
       +' '+fl(RepWin  ,7,' ')+' '+fl(RepPs  ,7,' ')   
       +' '+fl(RepStWin,9,' ')+' '+fl(RepStPs,9,' ') 
       +' '+fl(PathNo  ,4,' ')+' '+fl(SetNo  ,4,' ')// set name
    if(mes!='')buf+=' :'+eol+'... '+mes 
	buf+=eol
  }
  if(e && mes=='') buf=''
  return buf
}// ------------------------------------------------

//  if ( (ic>=32 && ic<=126) || (ic>=192 && ic<=255) ) {}  //latin
function ValidFontName(s){ // ValidStr :string  return bad pos if >=0
  var l,m,ic,jc,findok,status 
  status=-1; l=s.length; m=okchars.length
  for (var i=0; i<=l-1; i++) { ic=s.charCodeAt(i) // Ord(s[i]) s.charCodeAt()
    findok=false
    for (var j=0; j<=m; j++) { jc=okchars.charCodeAt(j)
      findok=(ic==jc)
      if (findok) break // break loop
    }
    if (!findok) {status=i; break; };
  }
  return status;
}// ------------------------------------------------

function ShowBadNames(){var buf='', i;
  buf+='--- Check TT/PS names:'+eol+br;i=0;
  for (var k=0; k<=LastFont; k++) {
    if (Fonts[k].Bad>0) {
    buf+=GetFontErr(k)+eol+br+'... '+' win="'+Fonts[k].WinName+'" '+' ps="'+Fonts[k].PSname+'" '+br;
	   i++; 
  }}
  buf+=fl(i,6,' ')+' bad tt/ps font names '+eol+br;
  return buf
}// ------------------------------------------------

function CheckDblWinNames(){ var buf='', i,k,m, fntwinnm,mes,m1,m2;
  buf+='--- Check dbl WinNames:'+eol+br;
  i=0;
  for (k=0; k<=LastFont-1; k++) { fntwinnm=Fonts[k].WinName;
    for (m=k+1; m<=LastFont;m++) { mes='';
      if  (fntwinnm==Fonts[m].WinName)  {
	      if     (Fonts[k].TypeCh!=Fonts[m].TypeCh)   {
	        with (Fonts[k]) { RepStWin='E'; RepWin=m; };
	        with (Fonts[m]) { RepStWin='E'; RepWin=k; }; mes='ERR:';
	      } else if (Fonts[k].StyleCh==Fonts[m].StyleCh)  {
	        with (Fonts[k]) { RepStWin='W'; RepWin=m; };
	        with (Fonts[m]) { RepStWin='W'; RepWin=k; }; mes='Wrn:';
	      };
	      if (mes!='')  { i++
	        buf+=' '+mes+' double WinName "'+fntwinnm+'"'+eol+br;
	        m1=Sets[Fonts[k].SetNo].Name// TrimSp(Sets[Fonts[k].SetNo].Name,'B');
	        m2=Sets[Fonts[m].SetNo].Name// TrimSp(Sets[Fonts[m].SetNo].Name,'B');
	        buf+='... ['+m1+' #'+fl(k,5,' ')+']-['+m2+' #'+fl(m,5,' ')+']'+eol+br;
	      };
      };
    };
  };
  buf+=fl(i,6,' ')+' double WinNames '+eol+br;
  return buf
}// ------------------------------------------------

function CheckDblPSnames(){ var buf='';var i,k,m, fntpsnm,mes,m1,m2;
  buf+='--- Check dbl PSnames:'+eol+br;
  i=0;
  for (k=0; k<=LastFont-1; k++) { fntpsnm=Fonts[k].PSname;
    for (m=k+1; m<=LastFont; m++){ mes='';
      if  (fntpsnm==Fonts[m].PSname)  {
	      with (Fonts[k]) { RepStPs ='W'; RepPs =m; };
	      with (Fonts[m]) { RepStPs ='W'; RepPs =k; };
	      mes='Wrn:';
	      if (mes!='')  { i++;
	        buf+=' '+mes+' double PSname "'+fntpsnm+'"'+eol+br
	        m1=Sets[Fonts[k].SetNo].Name     
	        m2=Sets[Fonts[m].SetNo].Name	        
	        buf+='... ['+m1+' #'+fl(k,5,' ')+']-['+m2+' #'+fl(m,5,' ')+']'+eol+br;
	      };
      };
    };
  };
  buf+=fl(i,6,' ')+' double PSnames '+eol+br;
  return buf
}// ------------------------------------------------
load_end()